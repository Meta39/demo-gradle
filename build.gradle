//如果报Could not resolve org.springframework.boot:spring-boot-gradle-plugin:X.X.X，则修改IDEA setting中 Gradle JVM为Project SDK。
buildscript {//构建gradle脚本自身需要的资源，可以声明的资源包括依赖项、第三方插件、maven仓库地址等
    ext {
        //统一版本管理
        lombokVersion = "1.18.32"//lombok版本
        springBootVersion = "3.2.5"//spring boot 版本
        mysqlVersion = "8.4.0"//mysql版本
        mybatisPlusVersion = "3.5.6"
        springAiVersion = "0.8.1"//AI版本
        httpclient5Version = "5.3.1"//http client5 版本
        graalvmNativeImageVersion = "0.10.2" // GraalVM Native Image plugin 版本
    }

    //设置仓库
    repositories {
        //从前到后顺序执行，找不到就往后找。
        mavenLocal()//本地仓库
        maven { url "https://maven.aliyun.com/repository/public" }//镜像仓库
        mavenCentral()//官方仓库
    }

    dependencies {
        //spring-boot-gradle插件，方便版本管理
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        /*
            引入 GraalVM Native Image 插件，然后可以在其它子项目通过 apply plugin: 插件【不用使用版本，因为这里已经有版本】使用插件
            使用了 GraalVM Native Image 插件的子项目，必须使用 GraalVM JDK，或者配置 GRAALVM_HOME 环境变量为GraalVM JDK 安装路径
         */
        classpath "org.graalvm.buildtools:native-gradle-plugin:${graalvmNativeImageVersion}"
    }
}

//全局配置，包括root和其子项目
allprojects {
    apply plugin: "java"
    group "com.fu"//项目组
    version "1"//项目版本

    java {
        sourceCompatibility = JavaVersion.VERSION_21//java版本
        targetCompatibility = JavaVersion.VERSION_21//java版本
    }

    tasks.withType(JavaCompile).configureEach {
        options.release = 21
        //增量编译高版本默认：true
        options.incremental = true
        //在单独的进程中执行 Java 编译任务
        options.fork = true
        //编译过程中的错误设置为不会导致构建失败，可能多地找出所有的编译问题
        options.failOnError = false
        options.encoding = "UTF-8"
        options.compilerArgs += [
                "-parameters",//编译后变量名称和源代码名称一致，IDEA "Java Compile" "Additional command line parameters"添加"-parameters"
                "--enable-preview"//启用 Java 功能预览
        ]
    }

    tasks.withType(Test).configureEach {
        jvmArgs += "--enable-preview"
        //禁用测试报告提升构建速度
        reports.html.required = false
        reports.junitXml.required = false
    }

    tasks.withType(JavaExec).configureEach {
        jvmArgs += "--enable-preview"
    }

    //所有项目执行 Gradle 命令时跳过 compileTestJava 命令
    compileTestJava {
        enabled = false
    }

    //所有项目跳过 test 命令
    test {
        enabled = false
    }

    //所有项目跳过 testClasses 命令
    testClasses {
        enabled = false
    }

    // 将 @env@ 替换为 命令行env的值
    def env = System.getProperty("env") ?: "dev"
    processResources {
        filesMatching('**/application.yml') {
            filter {
                it.replace('@env@', env)
            }
        }
    }

    repositories {
        //从前到后顺序执行，找不到就往后找。
        mavenLocal()//本地仓库
        /*maven {
            url "公司私有仓库 releases 地址"
            mavenContent {
                releasesOnly()
            }
            credentials {
                username "user"
                password "password"
            }
        }
        maven {
            url "公司私有仓库 snapshots 地址"
            mavenContent {
                snapshotsOnly()
            }
            credentials {
                username "user"
                password "password"
            }
        }*/
        maven { url "https://maven.aliyun.com/repository/public" }//镜像仓库
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()//官方仓库
    }
}

//配置所有子项目
subprojects {
    apply plugin: "io.spring.dependency-management"//使用版本管理插件

    //dependencyManagement版本统一管理，类似maven的dependencyManagement
    dependencyManagement {
        dependencies {
            //统一版本管理
            dependency "org.projectlombok:lombok:${lombokVersion}"
            dependency "com.mysql:mysql-connector-j:${mysqlVersion}"
            dependency "com.baomidou:mybatis-plus-spring-boot3-starter:${mybatisPlusVersion}"
            dependency "org.apache.httpcomponents.client5:httpclient5:${httpclient5Version}"
        }
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"//Spring Boot
            mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"//Spring AI
        }
    }
}
